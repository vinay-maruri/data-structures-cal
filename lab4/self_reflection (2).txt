All questions are optional, though try to answer at least 4. The main goal of this file is to get you thinking critically about your own work, but we will also use these self reflections at the end of the semester when we do our internal review of the course.

ArrayDeque:

Q: Give an example of at least one idea from the staff solution that would have made your solution better (if any).

A: Extensive usage of helper methods would've made my code more readable and simpler to debug than it ended up being.

Q: What's something you felt proud of in your code, if anything?

A: It was conceptually simple. 

Q: What's something that was particularly inelegant in your code, if anything?

A: My removefirst and removelast methods were really written poorly in hindsight. There were so many bad practices and it was very hard to read.

Q: What did you learn by talking to your partner about writing ArrayDeque?

A: My partner's solution was much more elegantly written with helper methods and multiple pointers to keep track of which would've
made debugging easier.

Q: What do you wish you would have known before writing ArrayDeque, if anything?

A: Don't try to create so many special cases.

Q: If you wrote ArrayDeque again, what would you do differently, if anything?

A: I would gut my solution and re-write it to use helper methods and re-use common methods, and not write so many special cases.

-----

LinkedListDeque:

Q: Give an example of at least one idea from the staff solution that would have made your solution better (if any).

A: Moving pointers in a helper method would've been more elegant.

Q: What's something you felt proud of in your code, if anything?

A: Using the front and back pointers made my addlast and removelast solutions more elegant than the staff solution.

Q: What's something that was particularly inelegant in your code, if anything?

A: My addfirst and removefirst methods are awful to read and were mildly challenging to debug.

Q: What did you learn by talking to your partner about writing LinkedListDeque?

A: use more helper methods to create abstraction barriers and making your code easier to debug.

Q: What do you wish you would have known before writing LinkedListDeque, if anything?

A: Invariants make your code easier to debug because you don't have to dig through the entire program.

Q: If you wrote LinkedListDeque again, what would you do differently, if anything?

A: I would create abstraction barriers and not rely so heavily on controlling every part of the logic in each method.

-----

Meta:

Q: Did you like this design review process? Anything we should do differently next time?

A: This was a nice design review process and asked good questions. No changes needed.